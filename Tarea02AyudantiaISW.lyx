#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Patrones de Diseño
\end_layout

\begin_layout Author
Luis Sandoval, Crhistian Trujillo, José Acuña
\end_layout

\begin_layout Section
Definición
\end_layout

\begin_layout Standard
Los patrones de diseño son la base para la búsqueda de soluciones a problemas
 comunes en el desarrollo de software y otros ámbitos referentes al diseño
 de interacción o interfaces.
 Un patrón de diseño resulta ser una solución a un problema de diseño.
 Para que una solución sea considerada un patrón debe poseer ciertas característ
icas.
 Una de ellas es que debe haber comprobado su efectividad resolviendo problemas
 similares en ocasiones anteriores.
 Otra es que debe ser reutilizable, lo que significa que es aplicable a
 diferentes problemas de diseño en distintas circunstancias.
 
\end_layout

\begin_layout Subsection
Objetivos
\end_layout

\begin_layout Standard
Los patrones de diseño pretenden:
\end_layout

\begin_layout Itemize
Reutilizar elementos en el diseño de Software.
\end_layout

\begin_layout Itemize
No reinventar la rueda...
 
\end_layout

\begin_layout Itemize
Tener un idioma común entre desarrolladores.
 
\end_layout

\begin_layout Itemize
Estandarizar el modo de diseñar Software.
 
\end_layout

\begin_layout Itemize
Facilitar el aprendizaje para las generaciones venideras.
\end_layout

\begin_layout Subsection
Tipos de Patrones de Diseño
\end_layout

\begin_layout Itemize
Patrones creacionales.
 
\end_layout

\begin_layout Itemize
Patrones Estructurales.
 
\end_layout

\begin_layout Itemize
Patrones de Comportamiento.
 
\end_layout

\begin_layout Itemize
Patrones de Interacción.
 
\end_layout

\begin_layout Section
MVC
\end_layout

\begin_layout Standard
El Modelo Vista Controlador (MVC) es un patrón de arquitectura de software
 que separa los datos y la lógica de negocio de una aplicación de la interfaz
 de usuario y el módulo encargado de gestionar los eventos y las comunicaciones.
 Para ello MVC propone la construcción de tres componentes distintos que
 son el modelo, la vista y el controlador, es decir, por un lado define
 componentes para la representación de la información, y por otro lado para
 la interacción del usuario.
 Este patrón de diseño se basa en las ideas de reutilización de código y
 la separación de conceptos, características que buscan facilitar la tarea
 de desarrollo de aplicaciones y su posterior mantenimiento.
\end_layout

\begin_layout Subsection
Historia
\end_layout

\begin_layout Standard
MVC fue introducido por Trygve Reenskaug en Smalltalk-76 durante su visita
 a Xerox Parc en los años 70 y, seguidamente, en los años 80, Jim Althoff
 y otros implementaron una versión de MVC para la biblioteca de clases de
 Smalltalk-808 .
 Sólo más tarde, en 1988, MVC se expresó como un concepto general en un
 artículo9 sobre Smalltalk-80.
\end_layout

\begin_layout Subsection
Descripción
\end_layout

\begin_layout Standard
El patrón de arquitectura "modelo vista controlador", es una filosofía de
 diseño de aplicaciones, compuesta por:
\series bold

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Modelo
\end_layout

\begin_layout Itemize
Contiene el núcleo de la funcionalidad (dominio) de la aplicación.
 
\end_layout

\begin_layout Itemize
Encapsula el estado de la aplicación.
 
\end_layout

\begin_layout Itemize
No sabe nada / independiente del Controlador y la Vista.
\end_layout

\begin_layout Standard

\series bold
Vista 
\end_layout

\begin_layout Itemize
Es la presentación del Modelo.
 
\end_layout

\begin_layout Itemize
Puede acceder al Modelo pero nunca cambiar su estado.
 
\end_layout

\begin_layout Itemize
Puede ser notificada cuando hay un cambio de estado en el Modelo.
\end_layout

\begin_layout Standard

\series bold
Controlador
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Reacciona a la petición del Cliente, ejecutando la acción adecuada y creando
 el modelo pertinente.
 
\begin_inset Newline newline
\end_inset

Para entender cómo funciona nuestro patrón Modelo vista controlador, se
 debe entender la división a través del conjunto de estos tres elementos
 y como estos componentes se comunican unos con los otros y con otras vistas
 y controladores externos a el modelo principal.
 Para ello, es importante saber que el controlador interpreta las entradas
 del usuario (tanto teclado como el ratón), enviado el mensaje de acción
 al modelo y a la vista para que se proceda con los cambios que se consideren
 adecuados.
\begin_inset Newline newline
\end_inset


\series bold
 
\end_layout

\begin_layout Standard

\series bold
Unión del modelo con la vista y el controlador
\series default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Como no todos los modelos pueden ser pasivos, necesitamos algo que comunique
 al controlador y a la vista, por lo que en este caso, si que necesitamos
 el modelo, ya que solo este puede llevar a cabo los cambios necesarios
 al estado actual en el que estos se encuentran.
 
\end_layout

\begin_layout Standard

\series bold
Al contrario que el modelo, que puede ser asociado a múltiples asociaciones
 con otras vistas y controladores, cada vista solo puede ser asociada a
 un único controlador
\series default
, por lo que han de tener una variable de tipo controler que notificara
 a la vista cual es su controlador o modelo asignado.
 De igual manera, el controlador tiene una variable llamada View que apunta
 a la vista.
 De esta manera, pueden enviarse mensajes directos el uno al otro y al mismo
 tiempo, a su modelo.
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Standard
Al final, 
\series bold
la vista es quien lleva la responsabilidad de establecer la comunicación
 entre los elementos de nuestro patrón MVC
\series default
.
 Cuando la vista recibe un mensaje que concierne al modelo o al controlador,
 lo deja registrado como el modelo con el cual se comunicara y apunta con
 la variable controller al controlador asignado, enviándole al mismo su
 identificación para que el controlador establezca en su variable view el
 identificador de la vista y así puedan operar conjuntamente.
 El responsable de deshacer estas conexiones, seguirá siendo la vista, quitándos
e a si misma como dependiente del modelo y liberando al controlador.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Ejemplo
\end_layout

\begin_layout Standard
Un cliente llega a la sucursal de un banco y comienza interactuar con el
 cajero que se ubica en un cubículo, dicho cajero solicita datos como el
 el nombre, apellido paterno, apellido materno, rut, fecha de nacimiento
 y el monto , y donde el cliente pide su requerimiento, el cajero de la
 sucursal está controlado por el tesorero de la sucursal el cual conoce
 todos los términos de los trámites disponibles en el, el cajero timbra
 el papel y lo firma, si el tesorero aprobó el trámite que solicitó el cliente,
  siendo de esta manera el tesorero verifica si el cliente tiene saldo disponibl
e en su cuenta con el encargado de cuentas, si tiene fondo entonces el tesorero
 aprueba la solicitud  y procede a la bóveda de la sucursal.
 del banco retirando el efectivo y procede a entregar al cajero, después
 el cajero  le pasa el monto  al cliente  y el comprobante firmado y timbrado.
 
\end_layout

\begin_layout Itemize
cajero(vista)
\end_layout

\begin_layout Itemize
tesorero(controlador)
\end_layout

\begin_layout Itemize
encargado de cuenta(modelo)
\end_layout

\begin_layout Standard
Repositorio De este archivo.
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/joseacuna/Tarea02AyudantiaISW2014
\end_layout

\end_inset


\end_layout

\end_body
\end_document
