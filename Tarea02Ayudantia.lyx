#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Metodologías Rup y XP
\end_layout

\begin_layout Author
Luis Sandoval,Christian Trujillo, Jose Acuña
\end_layout

\begin_layout Date
14/05/14
\end_layout

\begin_layout Abstract
La metodología de software , para la ingeniería de software es una estructura
 de trabajo realizada para planificar , controlar y estructurar un proceso
 de desarrollo en sistemas de información.
\end_layout

\begin_layout Section
Metodología Rup
\end_layout

\begin_layout Standard

\size small
RUP es un preceso de desarrollo de software, junto con el lenguaje unificado
 de modelado de UML, se utiliza para el analisis ,diseño, implementación
 y documentoción de sistema orientado a objetos no es un sistema con pasos
 firmemente establecidos,sino un conjunto de metodologías adaptables al
 contexto y necesidades de cada organización.
\end_layout

\begin_layout Standard
El rup esta basado en 6 principios clave: 
\end_layout

\begin_layout Enumerate

\size small
Adaptar el proceso 
\begin_inset Newline newline
\end_inset

El proceso se debera adaptar a las necesidades del cliente ya que es importante
 interactuar con esas caracteristica propia del proyecto u organización,
 permite tener en cuenta el alcance del proyecto en un area subformal para
 hacer un proceso de satisfaccion del software.
\end_layout

\begin_layout Enumerate

\size small
Equilibrar propiedades 
\begin_inset Newline newline
\end_inset

Esto permite encontrar el equilibrio que satisfaga los deseos de todos,si
 algun participante tiene un requisito y no todos estan deacuerdo, esto
 permite equilibrar y corregir desacuerdos que surjan en el futuro
\end_layout

\begin_layout Enumerate

\size small
Demostrar valor iterativamente 
\begin_inset Newline newline
\end_inset

Se entregan en etapas iteradas en forma interna, en cada iteracion se va
 analizando la opinion de los inversores.
\end_layout

\begin_layout Enumerate

\size small
Colaboracion entre equipos 
\begin_inset Newline newline
\end_inset

El desarrollo de software no lo hace una persona si no multiples equipos,
 Debe haber una comunicación fluida para coordinar requisitos, desarrollo,
 evaluaciones, planes, resultados, etc.
\end_layout

\begin_layout Enumerate

\size small
Elevar nivel abtraccion motiva 
\begin_inset Newline newline
\end_inset

Motiva el concepto de reutilisable tales como patron de software, como 4GK
 o framework tambien permite discusiones, diversos niveles y soluciones
 arquitectonicas, esto representa la parte visual de la arquitectura,ejemplo
 UML.
\end_layout

\begin_layout Enumerate

\size small
Enfocarce en la calidad 
\begin_inset Newline newline
\end_inset

El control de calidad no debe realizarce al final de cada iteracion, es
 decir, El aseguramiento de calidad forma parte del desarrollo que se implementa
 en el proyecto y no de un grupo independiente.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Metodología XP (programación Extrema)
\end_layout

\begin_layout Standard

\size small
La metodología xp se basa en tres capas las cuales contienen las doce prácticas
 básicas de esta metodología.
\end_layout

\begin_layout Standard

\size small
desde la capa mas externa a la mas interna son:
\end_layout

\begin_layout Enumerate

\size small
Metodología de procesos: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\size small
Diseño sencillo: Diseño tan simple como sea posible
\end_layout

\begin_layout Enumerate

\size small
test : objetivo del test no es detectar errores, si no evitarlos.
\end_layout

\begin_layout Enumerate

\size small
Refactorizacion: modificar el código viejo o obsoleto para dejarlo en buen
 estado
\end_layout

\begin_layout Enumerate

\size small
Codificación con estándares: tener una nomenclatura en común para que todos
 los participantes entiendan el código.
\end_layout

\end_deeper
\begin_layout Enumerate

\size small
Metodología de equipo:
\end_layout

\begin_deeper
\begin_layout Enumerate

\size small
\lang spanish
Propiedad
\lang english
 
\lang spanish
colectiva
\lang english
 del código: el código pertenece a todo el equipo y cualquier miembro tiene
 el derecho y deber de modificarlo.
\end_layout

\begin_layout Enumerate

\size small
Programación por parejas: Dos personas enfrentadas a un solo computador
 interactuando entre si para solucionar un problema.
\end_layout

\begin_layout Enumerate

\size small
Integración continua: todas las funcionalidades ya deben estar ensambladas
 en el sistema desde el inicio y no al final, ya que así permite la pronta
 corrección de errores 
\end_layout

\begin_layout Enumerate

\size small
Cuarenta horas semanales: habla de que el trabajo debe ser desarrollado
 durante la jornada laboral.
 si se solicitan horas extras hay que replantearse el proyecto.
\end_layout

\begin_layout Enumerate

\size small
Metáfora del negocio: una historia común compartida por el usuario y el
 equipo de desarrollo que describe como deben comportarse las diferentes
 partes del sistema que se quiere implementar
\end_layout

\end_deeper
\begin_layout Enumerate

\size small
Metodología de Programación: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\size small
Cliente in situ: el cliente siempre debe estar disponible para el resto
 del equipo, formando parte de el y fomentando la comunicación face to face.
\end_layout

\begin_layout Enumerate

\size small
Entregas frecuentes: se debe desarrollar lo antes posible versiones pequeñas
 del sistema 
\end_layout

\begin_layout Enumerate

\size small
Planificación Incremental: la planificación se plantea como un permanente
 dialogo entre los responsables de la perspectiva empresarial y de la perspectiv
aa técnica del proyecto.
\end_layout

\end_deeper
\begin_layout Standard

\size small
La metodología XP se vale de 4 variables las cuales son:
\end_layout

\begin_layout Enumerate

\size small
el coste: la inversión económica y en recursos.
\end_layout

\begin_layout Enumerate

\size small
el tiempo: el tiempo empleado, determinado por la fecha de entrega final.
\end_layout

\begin_layout Enumerate

\size small
la calidad: de código y el de la aplicación desarrollada.
\end_layout

\begin_layout Enumerate

\size small
el alcance: conjunto de funcionalidades.
\end_layout

\begin_layout Standard

\size small
los cuatro valores de la metodología son:
\end_layout

\begin_layout Itemize

\size small
comunicación: esta debe ser fluida entre todos los participante del proyecto,
 además el entorno debe favorecer la comunicación espontánea de los involucrados.
\end_layout

\begin_layout Itemize

\size small
Simplicidad: entre mas sencilla sea la solución, esta se podrá adaptar mas
 fácilmente a los cambios.
\end_layout

\begin_layout Itemize

\size small
Retroalimentacion: El usuario debe utilizar el software desarrollado , dando
 sus apreciaciones y sus necesidades no satisfechas, de manera que eso se
 conviertan en nuevos requerimientos del sistema.
\end_layout

\begin_layout Itemize

\size small
coraje: 
\begin_inset Quotes eld
\end_inset

Si funciona, puedes mejorarlo
\begin_inset Quotes erd
\end_inset

 , es decir que se debe revisar el código que ya funciona y tratar de mejorarlo
 y para ello se necesita bastante coraje.
\end_layout

\begin_layout Section
Cuadro Comparativo
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename 1374695_10202242292117187_498559612_n.jpg
	scale 70
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Section
Anexos
\end_layout

\begin_layout Standard
Repositorio: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/joseacuna/Tarea02AyudantiaISW2014
\end_layout

\end_inset


\end_layout

\end_body
\end_document
